<#
    .SYNOPSIS
        A DSC Resource for MS DNS Server that represents an <%= $PLASTER_PARAM_ResourceRecordType %> resource record.
    .PARAMETER ZoneName
        Specifies the name of a DNS zone. (Key Parameter)
<%
    $parameterDefinitions = $PLASTER_PARAM_KeyParams -split ",\s*"
    foreach ($paramDef in $parameterDefinitions) {
        $regexMatches = $paramDef | Select-String "\[(.*)\]\s*(.*)\s*=(.*)"
"    .PARAMETER $($regexMatches.Matches.Groups[2].Value)"
"        (Key Parameter)"
    }

    $parameterDefinitions = $PLASTER_PARAM_MandatoryParams -split ",\s*"
    foreach ($paramDef in $parameterDefinitions) {
        $regexMatches = $paramDef | Select-String "\[(.*)\]\s*(.*)\s*=(.*)"
"    .PARAMETER $($regexMatches.Matches.Groups[2].Value)"
"        (Mandatory Parameter)"
    }
    
    $parameterDefinitions = $PLASTER_PARAM_OptionalParams -split ",\s*"
    foreach ($paramDef in $parameterDefinitions) {
        $regexMatches = $paramDef | Select-String "\[(.*)\]\s*(.*)\s*=(.*)"
"    .PARAMETER $($regexMatches.Matches.Groups[2].Value)"
"        (Optional Parameter)"
    }
%>
    .PARAMETER TimeToLive
        Specifies the TimeToLive value of the <%= $PLASTER_PARAM_ResourceRecordType %> record. Value must be in valid TimeSpan string format (i.e.: Days.Hours:Minutes:Seconds.Miliseconds or 30.23:59:59.999).
    .PARAMETER DnsServer
        Name of the DnsServer to create the record on.
    .PARAMETER Ensure
        Whether the host record should be present or removed.
#>

$script:localizedDataDnsRecord<%= $PLASTER_PARAM_ResourceRecordType %> = Get-LocalizedData -DefaultUICulture en-US -FileName 'DnsRecord<%= $PLASTER_PARAM_ResourceRecordType %>.strings.psd1'

[DscResource()]
class DnsRecord<%= $PLASTER_PARAM_ResourceRecordType %> : DnsRecordBase
{
<%
    $parameterDefinitions = $PLASTER_PARAM_KeyParams -split ",\s*"
    foreach ($paramDef in $parameterDefinitions) {
        $regexMatches = $paramDef | Select-String "\[(.*)\]\s*(.*)\s*=(.*)"
"    [DscProperty(Key)]"
"    [$($regexMatches.Matches.Groups[1].Value)] $($regexMatches.Matches.Groups[2].Value)"
""
    }

    $parameterDefinitions = $PLASTER_PARAM_MandatoryParams -split ",\s*"
    foreach ($paramDef in $parameterDefinitions) {
        $regexMatches = $paramDef | Select-String "\[(.*)\]\s*(.*)\s*=(.*)"
"    [DscProperty(Mandatory)]"
"    [$($regexMatches.Matches.Groups[1].Value)] $($regexMatches.Matches.Groups[2].Value)"
""
    }
    
    $parameterDefinitions = $PLASTER_PARAM_OptionalParams -split ",\s*"
    foreach ($paramDef in $parameterDefinitions) {
        $regexMatches = $paramDef | Select-String "\[(.*)\]\s*(.*)\s*=(.*)"
"    [DscProperty()]"
"    [$($regexMatches.Matches.Groups[1].Value)] $($regexMatches.Matches.Groups[2].Value)"
""
    }
%>
    
    [DnsRecord<%= $PLASTER_PARAM_ResourceRecordType %>] Get()
    {
        return ([DnsRecordBase] $this).Get()
    }

    [void] Set()
    {
        ([DnsRecordBase] $this).Set()
    }

    [bool] Test()
    {
        return ([DnsRecordBase] $this).Test()
    }

    hidden [ciminstance] GetResourceRecord()
    {
        Write-Verbose -Message ($script:localizedDataDnsRecord<%= $PLASTER_PARAM_ResourceRecordType %>.GettingDnsRecordMessage -f '<%= $PLASTER_PARAM_ResourceRecordType %>', $this.ZoneName, $this.ZoneScope, $this.DnsServer)

        $dnsParameters = @{
            ZoneName     = $this.ZoneName
            ComputerName = $this.DnsServer
            RRType       = '<%= $PLASTER_PARAM_ResourceRecordType %>'
            # Add necessary Get-DnsServerResourceRecord parameters here and remove the throw below
        }
        throw "GetResourceRecord dnsParameters not implemented for $($this.GetType().Name)"

        if ($this.isScoped)
        {
            $dnsParameters['ZoneScope'] = $this.ZoneScope
        }

        $record = Get-DnsServerResourceRecord @dnsParameters -ErrorAction SilentlyContinue | Where-Object {
            <#
                Add any additional filtering criteria necessary here and remove the throw. Such as:
                $_.HostName -eq $recordHostName -and
                $_.RecordData.Port -eq $this.Port -and
                $_.RecordData.DomainName -eq "$($this.Target)."
            #>
            throw "GetResourceRecord Where-Object filter not implemented for $($this.GetType().Name)"
        }

        return $record
    }

    hidden [DnsRecord<%= $PLASTER_PARAM_ResourceRecordType %>] NewDscResourceObjectFromRecord([ciminstance] $record)
    {
        $dscResourceObject = [DnsRecord<%= $PLASTER_PARAM_ResourceRecordType %>] @{
            ZoneName     = $this.ZoneName
            SymbolicName = $this.SymbolicName
            Protocol     = $this.Protocol.ToLower()
            Port         = $this.Port
            Target       = ($record.RecordData.DomainName).TrimEnd('.')
            Priority     = $record.RecordData.Priority
            Weight       = $record.RecordData.Weight
            TimeToLive   = $record.TimeToLive.ToString()
            DnsServer    = $this.DnsServer
            Ensure       = 'Present'
        }

        return $dscResourceObject
    }

    hidden [void] AddResourceRecord()
    {
        $recordHostName = $this.getRecordHostName()

        $dnsParameters = @{
            ZoneName     = $this.ZoneName
            ComputerName = $this.DnsServer
            Name         = $recordHostName
            <%= $PLASTER_PARAM_ResourceRecordType %>          = $true
            DomainName   = $this.Target
            Port         = $this.Port
            Priority     = $this.Priority
            Weight       = $this.Weight
        }

        if ($this.isScoped)
        {
            $dnsParameters['ZoneScope'] = $this.ZoneScope
        }

        if ($null -ne $this.TimeToLive)
        {
            $dnsParameters.Add('TimeToLive', $this.TimeToLive)
        }

        Write-Verbose -Message ($script:localizedDataDnsRecord<%= $PLASTER_PARAM_ResourceRecordType %>.CreatingDnsRecordMessage -f '<%= $PLASTER_PARAM_ResourceRecordType %>', $recordHostName, $this.Target, $this.ZoneName, $this.ZoneScope, $this.DnsServer)

        Add-DnsServerResourceRecord @dnsParameters
    }
}
