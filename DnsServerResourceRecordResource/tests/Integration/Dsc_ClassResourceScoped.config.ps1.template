$zoneName = "<%= $($PLASTER_PARAM_ResourceRecordType) %>.test"
$zoneScope = 'external'

$ConfigurationData = @{
    AllNodes    = , @{
        NodeName        = 'localhost'
        CertificateFile = $Null
    }
    NonNodeData = @{
        DnsRecord<%= $($PLASTER_PARAM_ResourceRecordType) %>Scoped_CreateRecord_Config = @{
<%
$propertyData = Import-CSV -Path "$PLASTER_PARAM_PropDir/$($PLASTER_PARAM_ResourceRecordType)Props.csv"

$padsize = [Math]::Max('ZoneName'.length, ($propertyData.Name | ForEach-Object { $_.length } | Sort-Object -Descending | Select-Object -first 1))

"            $('ZoneName'.PadRight($padSize)) = `$zoneName"
"            $('ZoneScope'.PadRight($padSize)) = `$zoneScope"

foreach ($paramDef in ($propertyData | Where-Object {$_.Required -eq 'Key'})) {
    "            $($paramDef.Name.PadRight($padSize)) = $($paramDef.ExampleDesiredValue)"
}

foreach ($paramDef in ($propertyData | Where-Object {$_.Required -eq 'Mandatory'})) {
    "            $($paramDef.Name.PadRight($padSize)) = $($paramDef.ExampleDesiredValue)"
}
%>
        }
        DnsRecord<%= $($PLASTER_PARAM_ResourceRecordType) %>Scoped_ModifyRecord_Config = @{
<%
$propertyData = Import-CSV -Path "$PLASTER_PARAM_PropDir/$($PLASTER_PARAM_ResourceRecordType)Props.csv"

$padsize = [Math]::Max('ZoneName'.length, ($propertyData.Name | ForEach-Object { $_.length } | Sort-Object -Descending | Select-Object -first 1))

"            $('ZoneName'.PadRight($padSize)) = `$zoneName"
"            $('ZoneScope'.PadRight($padSize)) = `$zoneScope"

foreach ($paramDef in ($propertyData | Where-Object {$_.Required -eq 'Key'})) {
    "            $($paramDef.Name.PadRight($padSize)) = $($paramDef.ExampleDesiredValue)"
}

foreach ($paramDef in ($propertyData | Where-Object {$_.Required -eq 'Mandatory'})) {
    "            $($paramDef.Name.PadRight($padSize)) = $($paramDef.ExampleUndesiredValue)"
}

foreach ($paramDef in ($propertyData | Where-Object {-not $_.Required})) {
    "            $($paramDef.Name.PadRight($padSize)) = $($paramDef.ExampleUndesiredValue)"
}

"            $('DnsServer'.PadRight($padSize)) = 'localhost'"
"            $('TimeToLive'.PadRight($padSize)) = '05:00:00'"
"            $('Ensure'.PadRight($padSize)) = 'Present'"
%>
        }
        DnsRecord<%= $($PLASTER_PARAM_ResourceRecordType) %>Scoped_DeleteRecord_Config = @{

<%
$propertyData = Import-CSV -Path "$PLASTER_PARAM_PropDir/$($PLASTER_PARAM_ResourceRecordType)Props.csv"

$padsize = [Math]::Max('ZoneName'.length, ($propertyData.Name | ForEach-Object { $_.length } | Sort-Object -Descending | Select-Object -first 1))

"            $('ZoneName'.PadRight($padSize)) = `$zoneName"
"            $('ZoneScope'.PadRight($padSize)) = `$zoneScope"

foreach ($paramDef in ($propertyData | Where-Object {$_.Required -eq 'Key'})) {
    "            $($paramDef.Name.PadRight($padSize)) = $($paramDef.ExampleDesiredValue)"
}

foreach ($paramDef in ($propertyData | Where-Object {$_.Required -eq 'Mandatory'})) {
    "            $($paramDef.Name.PadRight($padSize)) = $($paramDef.EmptyValue)"
}

"            $('Ensure'.PadRight($padSize)) = 'Absent'"
%>
        }
    }
}

<#
    .SYNOPSIS
        Create an <%= $($PLASTER_PARAM_ResourceRecordType) %> record
#>
configuration DnsRecord<%= $($PLASTER_PARAM_ResourceRecordType) %>Scoped_CreateRecord_Config
{
    Import-DscResource -ModuleName 'xDnsServer'

    node $AllNodes.NodeName
    {
        xDnsServerPrimaryZone "Zone $zoneName"
        {
            Name = $zoneName
        }

        DnsRecord<%= $($PLASTER_PARAM_ResourceRecordType) %>Scoped 'Integration_Test'
        {
<%
$propertyData = Import-CSV -Path "$PLASTER_PARAM_PropDir/$($PLASTER_PARAM_ResourceRecordType)Props.csv"

$padsize = [Math]::Max('ZoneName'.length, ($propertyData.Name | ForEach-Object { $_.length } | Sort-Object -Descending | Select-Object -first 1))

"            $('ZoneName'.PadRight($padSize)) = `$ConfigurationData.NonNodeData.DnsRecord$($PLASTER_PARAM_ResourceRecordType)Scoped_CreateRecord_Config.ZoneName"
"            $('ZoneScope'.PadRight($padSize)) = `$ConfigurationData.NonNodeData.DnsRecord$($PLASTER_PARAM_ResourceRecordType)Scoped_CreateRecord_Config.ZoneScope"

foreach ($paramDef in ($propertyData | Where-Object {$_.Required -eq 'Key'})) {
"            $($paramDef.Name.PadRight($padSize)) = `$ConfigurationData.NonNodeData.DnsRecord$($PLASTER_PARAM_ResourceRecordType)Scoped_CreateRecord_Config.$($paramDef.Name)"
}

foreach ($paramDef in ($propertyData | Where-Object {$_.Required -eq 'Mandatory'})) {
"            $($paramDef.Name.PadRight($padSize)) = `$ConfigurationData.NonNodeData.DnsRecord$($PLASTER_PARAM_ResourceRecordType)Scoped_CreateRecord_Config.$($paramDef.Name)"
}
%>
        }
    }
}

<#
    .SYNOPSIS
        Modifies an existing <%= $($PLASTER_PARAM_ResourceRecordType) %> record
#>
configuration DnsRecord<%= $($PLASTER_PARAM_ResourceRecordType) %>Scoped_ModifyRecord_Config
{
    Import-DscResource -ModuleName 'xDnsServer'

    node $AllNodes.NodeName
    {
        xDnsServerPrimaryZone "Zone $zoneName"
        {
            Name = $zoneName
        }

        DnsRecord<%= $($PLASTER_PARAM_ResourceRecordType) %>Scoped 'Integration_Test'
        {
<%
$propertyData = Import-CSV -Path "$PLASTER_PARAM_PropDir/$($PLASTER_PARAM_ResourceRecordType)Props.csv"

$padsize = [Math]::Max('ZoneName'.length, ($propertyData.Name | ForEach-Object { $_.length } | Sort-Object -Descending | Select-Object -first 1))

"            $('ZoneName'.PadRight($padSize)) = `$ConfigurationData.NonNodeData.DnsRecord$($PLASTER_PARAM_ResourceRecordType)Scoped_ModifyRecord_Config.ZoneName"
"            $('ZoneScope'.PadRight($padSize)) = `$ConfigurationData.NonNodeData.DnsRecord$($PLASTER_PARAM_ResourceRecordType)Scoped_ModifyRecord_Config.ZoneScope"

foreach ($paramDef in ($propertyData | Where-Object {$_.Required -eq 'Key'})) {
"            $($paramDef.Name.PadRight($padSize)) = `$ConfigurationData.NonNodeData.DnsRecord$($PLASTER_PARAM_ResourceRecordType)Scoped_ModifyRecord_Config.$($paramDef.Name)"
}

foreach ($paramDef in ($propertyData | Where-Object {$_.Required -eq 'Mandatory'})) {
"            $($paramDef.Name.PadRight($padSize)) = `$ConfigurationData.NonNodeData.DnsRecord$($PLASTER_PARAM_ResourceRecordType)Scoped_ModifyRecord_Config.$($paramDef.Name)"
}

foreach ($paramDef in ($propertyData | Where-Object {-not $_.Required})) {
"            $($paramDef.Name.PadRight($padSize)) = `$ConfigurationData.NonNodeData.DnsRecord$($PLASTER_PARAM_ResourceRecordType)Scoped_ModifyRecord_Config.$($paramDef.Name)"
}

"            $('DnsServer'.PadRight($padSize)) = `$ConfigurationData.NonNodeData.DnsRecord$($PLASTER_PARAM_ResourceRecordType)Scoped_ModifyRecord_Config.DnsServer"
"            $('TimeToLive'.PadRight($padSize)) = `$ConfigurationData.NonNodeData.DnsRecord$($PLASTER_PARAM_ResourceRecordType)Scoped_ModifyRecord_Config.TimeToLive"
"            $('Ensure'.PadRight($padSize)) = `$ConfigurationData.NonNodeData.DnsRecord$($PLASTER_PARAM_ResourceRecordType)Scoped_ModifyRecord_Config.Ensure"
%>
        }
    }
}

<#
    .SYNOPSIS
        Deletes an existing <%= $($PLASTER_PARAM_ResourceRecordType) %> record
#>
configuration DnsRecord<%= $($PLASTER_PARAM_ResourceRecordType) %>Scoped_DeleteRecord_Config
{
    Import-DscResource -ModuleName 'xDnsServer'

    node $AllNodes.NodeName
    {
        xDnsServerPrimaryZone "Zone $zoneName"
        {
            Name = $zoneName
        }

        DnsRecord<%= $($PLASTER_PARAM_ResourceRecordType) %>Scoped 'Integration_Test'
        {
<%
$propertyData = Import-CSV -Path "$PLASTER_PARAM_PropDir/$($PLASTER_PARAM_ResourceRecordType)Props.csv"

$padsize = [Math]::Max('ZoneName'.length, ($propertyData.Name | ForEach-Object { $_.length } | Sort-Object -Descending | Select-Object -first 1))

"            $('ZoneName'.PadRight($padSize)) = `$ConfigurationData.NonNodeData.DnsRecord$($PLASTER_PARAM_ResourceRecordType)Scoped_DeleteRecord_Config.ZoneName"
"            $('ZoneScope'.PadRight($padSize)) = `$ConfigurationData.NonNodeData.DnsRecord$($PLASTER_PARAM_ResourceRecordType)Scoped_DeleteRecord_Config.ZoneScope"

foreach ($paramDef in ($propertyData | Where-Object {$_.Required -eq 'Key'})) {
"            $($paramDef.Name.PadRight($padSize)) = `$ConfigurationData.NonNodeData.DnsRecord$($PLASTER_PARAM_ResourceRecordType)Scoped_DeleteRecord_Config.$($paramDef.Name)"
}

foreach ($paramDef in ($propertyData | Where-Object {$_.Required -eq 'Mandatory'})) {
"            $($paramDef.Name.PadRight($padSize)) = `$ConfigurationData.NonNodeData.DnsRecord$($PLASTER_PARAM_ResourceRecordType)Scoped_DeleteRecord_Config.$($paramDef.Name)"
}
"            $('Ensure'.PadRight($padSize)) = `$ConfigurationData.NonNodeData.DnsRecord$($PLASTER_PARAM_ResourceRecordType)Scoped_DeleteRecord_Config.Ensure"
%>
        }
    }
}
