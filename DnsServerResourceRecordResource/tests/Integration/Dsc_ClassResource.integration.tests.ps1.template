$script:dscModuleName = 'xDnsServer'
$script:dscResourceFriendlyName = 'DnsRecord<%= $PLASTER_PARAM_ResourceRecordType %>'
$script:dscResourceName = "$($script:dscResourceFriendlyName)"

try
{
    Import-Module -Name DscResource.Test -Force -ErrorAction 'Stop'
}
catch [System.IO.FileNotFoundException]
{
    throw 'DscResource.Test module dependency not found. Please run ".\build.ps1 -Tasks build" first.'
}

$initializationParams = @{
    DSCModuleName = $script:dscModuleName
    DSCResourceName = $script:dscResourceName
    ResourceType = 'Class'
    TestType = 'Integration'
}
$script:testEnvironment = Initialize-TestEnvironment @initializationParams

# Using try/finally to always cleanup.
try
{
    #region Integration Tests
    $configurationFile = Join-Path -Path $PSScriptRoot -ChildPath "$($script:dscResourceName).config.ps1"
    . $configurationFile

    Describe "$($script:dscResourceName)_Integration" {
        BeforeAll {
            $resourceId = "[$($script:dscResourceFriendlyName)]Integration_Test"
        }

        $configurationName = "$($script:dscResourceName)_CreateRecord_Config"

        Context ('When using configuration {0}' -f $configurationName) {
            It 'Should compile and apply the MOF without throwing' {
                {
                    $configurationParameters = @{
                        OutputPath        = $TestDrive
                        ConfigurationData = $ConfigurationData
                    }

                    & $configurationName @configurationParameters

                    $startDscConfigurationParameters = @{
                        Path         = $TestDrive
                        ComputerName = 'localhost'
                        Wait         = $true
                        Verbose      = $true
                        Force        = $true
                        ErrorAction  = 'Stop'
                    }

                    Start-DscConfiguration @startDscConfigurationParameters
                } | Should -Not -Throw
            }

            It 'Should be able to call Get-DscConfiguration without throwing' {
                {
                    $script:currentConfiguration = Get-DscConfiguration -Verbose -ErrorAction Stop
                } | Should -Not -Throw
            }

            It 'Should have set the resource and all the parameters should match' {
                $resourceCurrentState = $script:currentConfiguration | Where-Object -FilterScript {
                    $_.ConfigurationName -eq $configurationName -and $_.ResourceId -eq $resourceId
                }

                $shouldBeData = $ConfigurationData.NonNodeData.$configurationName

                # Key properties
                $resourceCurrentState.ZoneName | Should -Be $shouldBeData.ZoneName
                $resourceCurrentState.ZoneScope | Should -Be $shouldBeData.ZoneScope
<%
$propertyData = Import-CSV -Path "$PLASTER_PARAM_PropDir/$($PLASTER_PARAM_ResourceRecordType)Props.csv"

foreach ($paramDef in ($propertyData | Where-Object {$_.Required -eq 'Key'})) {
"                `$resourceCurrentState.$($paramDef.Name) | Should -Be `$shouldBeData.$($paramDef.Name)"
}
""

if ($propertyData | Where-Object {$_.Required -eq 'Mandatory'}) {
    "                # Mandatory properties"
    foreach ($paramDef in ($propertyData | Where-Object {$_.Required -eq 'Mandatory'})) {
    "                `$resourceCurrentState.$($paramDef.Name) | Should -Be `$shouldBeData.$($paramDef.Name)"
    }
    ""
}

"                # Optional properties were not specified, so we just need to ensure the value exists"
foreach ($paramDef in ($propertyData | Where-Object {-not $_.Required})) {
"                `$resourceCurrentState.$($paramDef.Name) | Should -Not -Be `$null"
}
"                `$resourceCurrentState.TimeToLive | Should -Not -Be `$null"
""
"                # Defaulted properties"
"                `$resourceCurrentState.DnsServer | Should -Be 'localhost'"
"                `$resourceCurrentState.Ensure | Should -Be 'Present'"
%>
            }

            It 'Should return $true when Test-DscConfiguration is run' {
                Test-DscConfiguration -Verbose | Should -Be 'True'
            }
        }

        $configurationName = "$($script:dscResourceName)_ModifyRecord_Config"

        Context ('When using configuration {0}' -f $configurationName) {
            It 'Should compile and apply the MOF without throwing' {
                {
                    $configurationParameters = @{
                        OutputPath        = $TestDrive
                        ConfigurationData = $ConfigurationData
                    }

                    & $configurationName @configurationParameters

                    $startDscConfigurationParameters = @{
                        Path         = $TestDrive
                        ComputerName = 'localhost'
                        Wait         = $true
                        Verbose      = $true
                        Force        = $true
                        ErrorAction  = 'Stop'
                    }

                    Start-DscConfiguration @startDscConfigurationParameters
                } | Should -Not -Throw
            }

            It 'Should be able to call Get-DscConfiguration without throwing' {
                {
                    $script:currentConfiguration = Get-DscConfiguration -Verbose -ErrorAction Stop
                } | Should -Not -Throw
            }

            It 'Should have set the resource and all the parameters should match' {
                $resourceCurrentState = $script:currentConfiguration | Where-Object -FilterScript {
                    $_.ConfigurationName -eq $configurationName -and $_.ResourceId -eq $resourceId
                }

                $shouldBeData = $ConfigurationData.NonNodeData.$configurationName

                # Key properties
                $resourceCurrentState.ZoneName | Should -Be $shouldBeData.ZoneName
                $resourceCurrentState.ZoneScope | Should -Be $shouldBeData.ZoneScope
<%
$propertyData = Import-CSV -Path "$PLASTER_PARAM_PropDir/$($PLASTER_PARAM_ResourceRecordType)Props.csv"

foreach ($paramDef in ($propertyData | Where-Object {$_.Required -eq 'Key'})) {
"                `$resourceCurrentState.$($paramDef.Name) | Should -Be `$shouldBeData.$($paramDef.Name)"
}
""

if ($propertyData | Where-Object {$_.Required -eq 'Mandatory'}) {
    "                # Mandatory properties"
    foreach ($paramDef in ($propertyData | Where-Object {$_.Required -eq 'Mandatory'})) {
    "                `$resourceCurrentState.$($paramDef.Name) | Should -Be `$shouldBeData.$($paramDef.Name)"
    }
    ""
}

"                # Optional properties"
foreach ($paramDef in ($propertyData | Where-Object {-not $_.Required})) {
"                `$resourceCurrentState.$($paramDef.Name) | Should -Be `$shouldBeData.$($paramDef.Name)"
}
"                `$resourceCurrentState.TimeToLive | Should -Be `$shouldBeData.TimeToLive"
""
"                # Defaulted properties"
"                `$resourceCurrentState.DnsServer | Should -Be `$shouldBeData.DnsServer"
"                `$resourceCurrentState.Ensure | Should -Be `$shouldBeData.Ensure"
%>
            }

            It 'Should return $true when Test-DscConfiguration is run' {
                Test-DscConfiguration -Verbose | Should -Be 'True'
            }
        }

        $configurationName = "$($script:dscResourceName)_DeleteRecord_Config"

        Context ('When using configuration {0}' -f $configurationName) {
            It 'Should compile and apply the MOF without throwing' {
                {
                    $configurationParameters = @{
                        OutputPath        = $TestDrive
                        ConfigurationData = $ConfigurationData
                    }

                    & $configurationName @configurationParameters

                    $startDscConfigurationParameters = @{
                        Path         = $TestDrive
                        ComputerName = 'localhost'
                        Wait         = $true
                        Verbose      = $true
                        Force        = $true
                        ErrorAction  = 'Stop'
                    }

                    Start-DscConfiguration @startDscConfigurationParameters
                } | Should -Not -Throw
            }

            It 'Should be able to call Get-DscConfiguration without throwing' {
                {
                    $script:currentConfiguration = Get-DscConfiguration -Verbose -ErrorAction Stop
                } | Should -Not -Throw
            }

            It 'Should have set the resource and all the parameters should match' {
                $resourceCurrentState = $script:currentConfiguration | Where-Object -FilterScript {
                    $_.ConfigurationName -eq $configurationName -and $_.ResourceId -eq $resourceId
                }

                $shouldBeData = $ConfigurationData.NonNodeData.$configurationName

                # Key properties
                $resourceCurrentState.ZoneName | Should -Be $shouldBeData.ZoneName
                $resourceCurrentState.ZoneScope | Should -Be $shouldBeData.ZoneScope
<%
$propertyData = Import-CSV -Path "$PLASTER_PARAM_PropDir/$($PLASTER_PARAM_ResourceRecordType)Props.csv"

foreach ($paramDef in ($propertyData | Where-Object {$_.Required -eq 'Key'})) {
"                `$resourceCurrentState.$($paramDef.Name) | Should -Be `$shouldBeData.$($paramDef.Name)"
}
""

if ($propertyData | Where-Object {$_.Required -eq 'Mandatory'}) {
    "                # Mandatory properties"
    foreach ($paramDef in ($propertyData | Where-Object {$_.Required -eq 'Mandatory'})) {
    "                `$resourceCurrentState.$($paramDef.Name) | Should -Be `$shouldBeData.$($paramDef.Name)"
    }
    ""
}

"                # Optional properties"
foreach ($paramDef in ($propertyData | Where-Object {-not $_.Required})) {
@"
if (`$shouldBeData.$($paramDef.Name))
{
                    `$resourceCurrentState.$($paramDef.Name) | Should -Be `$shouldBeData.$($paramDef.Name)
}

"@
}

@"
                if (`$shouldBeData.TimeToLive)
                {
                    `$resourceCurrentState.TimeToLive | Should -Be `$shouldBeData.TimeToLive
                }

"@
%>
                # DnsServer is not specified in this test, so it defaults to 'localhost'
                $resourceCurrentState.DnsServer | Should -Be 'localhost'

                # Ensure will be Absent
                $resourceCurrentState.Ensure | Should -Be 'Absent'
            }

            It 'Should return $true when Test-DscConfiguration is run' {
                Test-DscConfiguration -Verbose | Should -Be 'True'
            }
        }

    }
    #endregion
}
finally
{
    Restore-TestEnvironment -TestEnvironment $script:testEnvironment
}