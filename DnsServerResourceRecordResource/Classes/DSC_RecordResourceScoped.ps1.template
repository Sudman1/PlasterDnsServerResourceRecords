<#
    .SYNOPSIS
        The DnsRecord<%= $PLASTER_PARAM_ResourceRecordType %>Scoped DSC resource manages <%= $PLASTER_PARAM_ResourceRecordType.ToUpper() %> DNS records against a specific zone and zone scope on a Domain Name System (DNS) server.

    .DESCRIPTION
        The DnsRecord<%= $PLASTER_PARAM_ResourceRecordType %>Scoped DSC resource manages <%= $PLASTER_PARAM_ResourceRecordType.ToUpper() %> DNS records against a specific zone and zone scope on a Domain Name System (DNS) server.

    .PARAMETER ZoneScope
        Specifies the name of a zone scope. (Key Parameter)
#>

[DscResource()]
class DnsRecord<%= $PLASTER_PARAM_ResourceRecordType %>Scoped : DnsRecord<%= $PLASTER_PARAM_ResourceRecordType %>
{
    [DscProperty(Key)]
    [System.String]
    $ZoneScope

    [DnsRecord<%= $PLASTER_PARAM_ResourceRecordType %>Scoped] Get()
    {
        return ([DnsRecordBase] $this).Get()
    }

    [void] Set()
    {
        ([DnsRecordBase] $this).Set()
    }

    [System.Boolean] Test()
    {
        return ([DnsRecordBase] $this).Test()
    }

    hidden [Microsoft.Management.Infrastructure.CimInstance] GetResourceRecord()
    {
        return ([DnsRecord<%= $PLASTER_PARAM_ResourceRecordType %>] $this).GetResourceRecord()
    }

    hidden [DnsRecord<%= $PLASTER_PARAM_ResourceRecordType %>Scoped] NewDscResourceObjectFromRecord([Microsoft.Management.Infrastructure.CimInstance] $record)
    {
        $dscResourceObject = [DnsRecord<%= $PLASTER_PARAM_ResourceRecordType %>Scoped] @{
<%
$propertyData = Import-CSV -Path "$PLASTER_PARAM_PropDir/$($PLASTER_PARAM_ResourceRecordType)Props.csv"

$padsize = [Math]::Max('TimeToLive'.length, ($propertyData.Name | ForEach-Object { $_.length } | Sort-Object -Descending | Select-Object -first 1))

"            $('ZoneName'.PadRight($padSize)) = `$this.ZoneName"
"            $('ZoneScope'.PadRight($padSize)) = `$this.ZoneScope"

foreach ($paramDef in ($propertyData | Where-Object -FilterScript { $_.Required -eq 'Key' })) {
    "            $($paramDef.Name.PadRight($padSize)) = `$this.$($paramDef.Name)"
}

if ($propertyData | Where-Object -FilterScript { $_.Required -ne 'Key' }) {
    "            # Apply values from $record as appropriate below"

    foreach ($paramDef in ($propertyData | Where-Object -FilterScript { $_.Required -eq 'Mandatory' })) {
        "            $($paramDef.Name.PadRight($padSize)) = throw 'NewDscResourceObjectFromRecord $($paramDef.Name) property not defined'"
    }

    foreach ($paramDef in ($propertyData | Where-Object -FilterScript { -not $_.Required })) {
        "            $($paramDef.Name.PadRight($padSize)) = throw 'NewDscResourceObjectFromRecord $($paramDef.Name) property not defined'"
    }
}

"            $('TimeToLive'.PadRight($padSize)) = `$record.TimeToLive.ToString()"
"            $('DnsServer'.PadRight($padSize)) = `$this.DnsServer"
"            $('Ensure'.PadRight($padSize)) = 'Present'"
%>
        }

        return $dscResourceObject
    }

    hidden [void] AddResourceRecord()
    {
        ([DnsRecord<%= $PLASTER_PARAM_ResourceRecordType %>] $this).AddResourceRecord()
    }

    hidden [void] ModifyResourceRecord([Microsoft.Management.Infrastructure.CimInstance] $existingRecord, [System.Collections.Hashtable[]] $propertiesNotInDesiredState)
    {
        ([DnsRecord<%= $PLASTER_PARAM_ResourceRecordType %>] $this).ModifyResourceRecord($existingRecord, $propertiesNotInDesiredState)
    }
}